package main

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CIDR is a string representation of a CIDR
type CIDR string

// IPAddress is a string representation of an IP v4 or v6 address
type IPAddress string

// StateType contains a valid resource state
type StateType string

// CommonStatus contains Contrail resource fields all types must implement in their status
type CommonStatus struct {
	ReconcilerState `json:",inline" protobuf:"bytes,1,opt,name=reconcilerState"`
}

// ReconcilerState describes a resource's reconciliation status including the State
// of the reconciliation as well as an Observation with additional information about
// the State.
type ReconcilerState struct {
	// State describe the current readiness of a resource after the last reconciliation.
	// The possible states include Pending, Success, and Failure.
	State StateType `json:"state" protobuf:"bytes,1,opt,name=state,casttype=StateType"`

	// Observation provides additional information related to the state of the
	// resource. For example, if a reconciliation error occurs, Observation will
	// contain a brief description of the problem.
	Observation string `json:"observation" protobuf:"bytes,2,opt,name=observation"`
}

// ContrailFqName contains the specific FqName field necessary for the Contrail
// Control-node.
type ContrailFqName struct {
	// FqName is the list of resource names that fully qualify a Contrail resource.
	// +optional
	FqName []string `json:"fqName,omitempty" protobuf:"bytes,1,rep,name=fqName"`
}

// CommonSpec contains Contrail resource fields all types must implement in their spec.
type CommonSpec struct {
	ContrailFqName `json:",inline" protobuf:"bytes,1,opt,name=contrailFqName"`
}

// SubnetSpec defines the desired state of a Subnet.
type SubnetSpec struct {
	// Common spec fields
	CommonSpec `json:",inline" protobuf:"bytes,1,opt,name=commonSpec"`

	// Subnet range in CIDR notation.
	// +optional
	CIDR CIDR `json:"cidr,omitempty" protobuf:"bytes,3,opt,name=cidr,casttype=CIDR"`

	// Default Gateway IP address in the subnet.
	// If not provided, one is auto-generated by the system.
	// +optional
	DefaultGateway IPAddress `json:"defaultGateway,omitempty" protobuf:"bytes,4,opt,name=defaultGateway,casttype=IPAddress"`

	// List of DNS servers associated with the subnet.
	// +optional
	DNSNameservers []IPAddress `json:"dnsNameservers,omitempty" protobuf:"bytes,5,rep,name=dnsNameservers,casttype=IPAddress"`

	// Ranges, when present, define the IP allocation ranges corresponding to
	// a given key.
	// If not provided, IP allocation is determined by the CIDR.
	// +optional
	Ranges []Range `json:"ranges,omitempty" protobuf:"bytes,6,rep,name=ranges"`

	// Disables auto allocation of BGPaaSPrimaryIP and BGPaaSecondaryIP. False by
	// default, automatic allocation is enabled. IPs are auto allocated when at
	// least one BGPAsAService is configured under this subnet. If DisableBGPaaSIPAutoAllocation
	// is set to true, BGPaaSPrimaryIP and BGPaaSSecondaryIP must be specified.
	// Leave this flag false if the BGPAsAService feature is not required.
	// +optional
	DisableBGPaaSIPAutoAllocation bool `json:"disableBGPaaSIPAutoAllocation,omitempty" protobuf:"varint,7,opt,name=disableBGPaaSIPAutoAllocation"`

	// Primary IP address used for the BGP as a service session.
	// +optional
	BGPaaSPrimaryIP IPAddress `json:"bgpaasPrimaryIP,omitempty" protobuf:"bytes,8,opt,name=bgpaasPrimaryIP,casttype=IPAddress"`

	// Secondary IP address used for the BGP as a service session when the
	// second control node is present.
	// +optional
	BGPaaSSecondaryIP IPAddress `json:"bgpaasSecondaryIP,omitempty" protobuf:"bytes,9,opt,name=bgpaasSecondaryIP,casttype=IPAddress"`
}

// Range is a list of IPRanges associated with a given key.
type Range struct {
	// Key is a text string defining the Range collection. Setting a Range with
	// an existing key will overwrite the exiting Range.
	Key string `json:"key,omitempty" protobuf:"bytes,1,rep,name=key"`
	// IPRanges lists one or more IPRange instance.
	IPRanges []IPRange `json:"ipRanges,omitempty" protobuf:"bytes,2,rep,name=ipRanges"`
}

// IPRange specifies the start and end for a range of IP addresses.
type IPRange struct {
	// From indicates beginning IP address for the allocation range.
	From IPAddress `json:"from" protobuf:"bytes,1,opt,name=from"`

	// To indicates last IP address for the allocation range.
	To IPAddress `json:"to" protobuf:"bytes,2,opt,name=to"`
}

// SubnetStatus defines the observed state of a Subnet.
type SubnetStatus struct {
	// Common status fields
	CommonStatus `json:",inline" protobuf:"bytes,1,opt,name=commonStatus"`

	// IPCount is the current number of allocated IP addresses in the Subnet.
	// +optional
	IPCount int64 `json:"ipCount,omitempty" protobuf:"varint,2,opt,name=ipCount"`

	// AllocationUsage is current percentage of allocated addresses in the Subnet.
	// +optional
	AllocationUsage string `json:"allocationUsage,omitempty" protobuf:"varint,3,opt,name=allocationUsage"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// Subnet represents a block of IP addresses and its configuration.
// IPAM allocates and releases IP address from that block on demand.
// It can be used by different VirtualNetwork in the mean time.
// +k8s:openapi-gen=true
// +resource:path=subnets,strategy=SubnetStrategy,shortname=sn,categories=contrail;ipam;networking
type Subnet struct {
	metav1.TypeMeta `json:",inline"`

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`

	// Specification of the desired state of the Subnet.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Spec SubnetSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`

	// The most recently observed status of the Subnet.
	// This data may not be up-to-date.
	// Populated by the system.
	// Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Status SubnetStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
}

// SubnetList is a list of Subnet.
type SubnetList struct {
	metav1.TypeMeta `json:",inline"`

	// Standard list's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#lists-and-simple-kinds
	// +optional
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`

	// Items contains all of the Subnet instances in the SubnetList.
	Items []Subnet `json:"items" protobuf:"bytes,2,rep,name=items"`
}
